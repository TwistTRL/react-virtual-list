{"version":3,"sources":["lib/VirtualList.js","lib/index.js","index.js"],"names":["ROW_COLOR_CYCLE","VirtualList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleScrollStartUpdate","scrollStart","capScrollStart","setState","handleScroll","ev","preventDefault","stopPropagation","state","deltaY","renderedItems","Set","_this2","_this$props","width","height","rowHeight","scrollbarColor","children","totalHeight","React","Children","count","ScrollbarElem","listWidth","react_default","a","createElement","dist_default","color","realHeight","realRange","updateScrollStartHandler","existingChildKey","map","child","key","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","childKey","value","has","delete","err","return","items","i","add","className","style","top","backgroundColor","length","react","onWheel","_this$props2","Math","max","min","Component","App","lib","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.d7afd1ff.chunk.js","sourcesContent":["import React, {Component, Fragment} from \"react\";\nimport PropTypes from 'prop-types';\nimport VerticalScrollbar from \"react-vertical-scrollbar\";\n\n// CSS\nimport \"./VirtualList.css\";\n\nconst SCROLLBAR_WIDTH = 10;\nconst ROW_COLOR_CYCLE = [\"white\",\"#f0f0f0\"];\n\nclass VirtualList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {scrollStart:0};\n    this.renderedItems = new Set();\n  }\n  \n  static getDerivedStateFromProps(props,state) {\n    let {children, height, rowHeight} = props;\n    let {scrollStart} = state;\n    if (scrollStart>React.Children.count(children)*rowHeight-height) {\n      return {scrollStart:Math.max(0,React.Children.count(children)*rowHeight-height)};\n    }\n    return null;\n  }\n  \n  render(){\n    let {width,height,rowHeight,scrollbarColor,children} = this.props;\n    let {scrollStart} = this.state;\n    let {renderedItems} = this;\n    let totalHeight = rowHeight*React.Children.count(children);\n    // Add scrollbar if needed\n    let ScrollbarElem = null;\n    let listWidth = width;\n    if (height<totalHeight) {\n      ScrollbarElem = <VerticalScrollbar  width={SCROLLBAR_WIDTH} height={height} color={scrollbarColor}\n                                          realHeight={totalHeight} realRange={height} scrollStart={scrollStart}\n                                          updateScrollStartHandler={this.handleScrollStartUpdate}\n                                          />\n      listWidth -= SCROLLBAR_WIDTH;\n    }\n    // Add list items\n    let existingChildKey = new Set(React.Children.map(children,\n      (child)=>\n        child.key\n      ));\n    for (let childKey of renderedItems) {\n      if (!existingChildKey.has(childKey))\n        renderedItems.delete(childKey);\n    }\n    let items = React.Children.map(children,\n      (child,i)=>{\n        if (!this.renderedItems.has(child.key) && (\n            i*rowHeight+rowHeight<=scrollStart ||\n            i*rowHeight>=scrollStart+height )\n            ){\n          return null;\n        }\n        else {\n          renderedItems.add(child.key);\n          return ( \n            <div  key={child.key}\n                  className=\"VirtualList-rowContainer\"\n                  style={{height:rowHeight,top:i*rowHeight,backgroundColor:ROW_COLOR_CYCLE[i%ROW_COLOR_CYCLE.length]}}\n                  >\n              {child}\n            </div>\n          );\n        }\n      });\n    \n    return (\n      <Fragment>\n        <div  className=\"VirtualList-masterContainer\"\n              style={{width:width,height:height}}\n              onWheel={this.handleScroll}\n              >\n          {ScrollbarElem}\n          <div  className=\"VirtualList-mainContainer\"\n                style={{height:height,width:listWidth,top:-scrollStart}}>\n            {items}\n          </div>\n        </div>\n      </Fragment>\n    )\n  }\n  \n  capScrollStart(scrollStart) {\n    let {height,children,rowHeight} = this.props;\n    let realHeight = rowHeight*React.Children.count(children);\n    if (realHeight<height){\n      return 0;\n    }\n    else {\n      return Math.max(0,Math.min(realHeight-height,scrollStart));\n    }\n  }\n  \n  handleScrollStartUpdate = (scrollStart)=>{\n    scrollStart = this.capScrollStart(scrollStart);\n    this.setState({scrollStart});\n  }\n  \n  handleScroll=(ev)=>{\n    ev.preventDefault();\n    ev.stopPropagation();\n    let {scrollStart} = this.state;\n    if (ev.deltaY<0) {\n      this.handleScrollStartUpdate(scrollStart-10);\n    }\n    else {\n      this.handleScrollStartUpdate(scrollStart+10);\n    }\n  }\n}\n\nVirtualList.propTypes = {\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  rowHeight: PropTypes.number.isRequired,\n  children: PropTypes.node,\n}\n\nexport default VirtualList;\n\n","import VirtualList from \"./VirtualList\";\n\nexport default VirtualList;\n","import React,{Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport VirtualList from \"./lib\";\n\nclass App extends Component {\n  render(){\n    return (\n      <VirtualList width={200} height={200} rowHeight={40} scrollbarColor=\"green\">\n        <p key='p1'>a p</p>\n        <p key='p2'>a p</p>\n        <div key='div1'>a div</div>\n        <span key='span1'>a span</span>\n        <p key='p3'>a p</p>\n        <span key='span2'>a span</span>\n        <div key='div2'>a div</div>\n        <div key='div3'>a div</div>\n        <p key='p4'>a p</p>\n        <div key='div4'>a div</div>\n        <span key='span3'>a span</span>\n        <span key='span4'>a span</span>\n      </VirtualList>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}